### All parameter descriptions found here http://wiki.ros.org/move_base

# Local planner
controller_frequency:      20.0 # default: 20.0 | The rate in Hz at which to run the control loop and send velocity commands to the base.
controller_patience:       30.0 # default: 15.0 | How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.

# Global planner
planner_frequency:         1.0 # default: 0.0 | The rate in Hz at which to run the global planning loop. If the frequency is set to 0.0, the global planner will only run when a new goal is received or the local planner reports that its path is blocked.
planner_patience:          30.0 # default: 5.0 | How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.

# Oscillation
oscillation_timeout:       0.0 # default: 0.0 | How long in seconds to allow for oscillation before executing recovery behaviors. A value of 0.0 corresponds to an infinite timeout.
oscillation_distance:      0.5 # default: 0.5 | How far in meters the robot must move to be considered not to be oscillating. Moving this far resets the timer counting up to the ~oscillation_timeout

# Recovery
recovery_behavior_enabled: true # default: true | Whether or not to enable the move_base recovery behaviors to attempt to clear out space.
clearing_rotation_allowed: false # default: true | Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has not set the recovery_behaviors parameter to anything custom.
shutdown_costmaps:         false # default: true | Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state
max_planning_retries:      10 # default: -1.0 | How many times to allow for planning retries before executing recovery behaviors. A value of -1.0 corresponds to an infinite retries.

# execute `rospack plugins --attrib=plugin nav_core | grep recovery` to look at all available recovery plugins
recovery_behaviors:
    
    # custom plugins
    #- name: 'super_aggressive_reset'
    #type: 'clear_total_costmap_recovery/ClearTotalCostmapRecovery' # reverts all costmaps to the static map
    # plugin code -> https://github.com/icclab/clear_total_costmap_recovery
    
    # default plugins
    -   name: 'aggressive_reset_1'
        type: 'clear_costmap_recovery/ClearCostmapRecovery'
    # -   name: 'clearing_rotation'
    #     type: 'rotate_recovery/RotateRecovery'
    # -   name: 'aggressive_reset_3'
    #     type: 'clear_costmap_recovery/ClearCostmapRecovery'
    # -   name: 'clearing_rotation'
    #     type: 'rotate_recovery/RotateRecovery'

# Clear costmap recovery reverts costmap to static map outside reset_distance and clears unknown space around the robot
# NOTE: costmap clearing only works if there is a static layer in the costmap

aggressive_reset_1:
    reset_distance: 2.0 # distance from robot beyond which obstacles will be cleared from costmap
    layer_names: [ "obstacle_3d_layer" ] # layers that recovery behavior will clear
aggressive_reset_2:
    reset_distance: 0.0
    layer_names: [ "obstacle_3d_layer" ]
aggressive_reset_3:
    reset_distance: 4.0
    layer_names: [ "obstacle_3d_layer" ]

# ALL other params
##################

# base_global_planner:        global_planner/GlobalPlanner
# base_local_planner:         teb_local_planner/TebLocalPlannerROS
# conservative_reset_dist:    3.0 # default: 3.0 | The distance away from the robot in meters beyond which obstacles will be cleared from the costmap when attempting to clear space in the map. Note, this parameter is only used when the default recovery behaviors are used for move_base.