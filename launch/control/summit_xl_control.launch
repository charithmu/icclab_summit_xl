<?xml version="1.0"?>
<launch>
	<!-- GRIPPER PARAMS -->
	<arg name="robotiq_gripper" default="false"/>

	<!-- skid, omni, steel_skid, steel_omni, diffdrive -->
	<!-- diffdrive has been tested only in simulation -->
	<arg name="kinematics" default="$(optenv ROBOT_KINEMATICS skid)"/>
	<arg name="ros_planar_move_plugin" default="false"/>
	<arg name="sim" default="false"/>
	<arg name="cmd_vel" default="robotnik_base_control/cmd_vel"/>
	<arg name="prefix" default="summit_xl_"/>
	<arg name="launch_robot_localization" default="false"/>


	<!-- Robot - Load joint controller configurations from YAML file to parameter server -->
	<group unless="$(arg sim)">
		<rosparam file="$(find summit_xl_control)/config/summit_xl_$(arg kinematics)_control.yaml" command="load"/>
		<param name="robotnik_base_control/joint/back_left_wheel_joint/name" value="$(arg prefix)back_left_wheel_joint"/>
		<param name="robotnik_base_control/joint/back_right_wheel_joint/name" value="$(arg prefix)back_right_wheel_joint"/>
		<param name="robotnik_base_control/joint/front_right_wheel_joint/name" value="$(arg prefix)front_right_wheel_joint"/>
		<param name="robotnik_base_control/joint/front_left_wheel_joint/name" value="$(arg prefix)front_left_wheel_joint"/>
		<param name="robotnik_base_control/odom_frame" value="$(arg prefix)odom"/>
		<param name="robotnik_base_control/robot_base_frame" value="$(arg prefix)base_footprint"/>

		<!-- load the controllers -->
		<node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="
		  robotnik_base_control
		  joint_read_state_controller
		  ">
		</node>
	</group>

	<!-- Simulation - Load joint controller configurations from YAML file to parameter server -->
	<group if="$(arg sim)">
		<rosparam file="$(find icclab_summit_xl)/config/$(arg prefix)control.yaml" command="load"/>

		<!-- Robot Arm Ros Controller -->
		<!-- <include file="$(find summit_xls_ur5_bringup)/launch/ur5_controllers.launch">
			<arg name="prefix" value="arm_"/>
		</include> -->

		<!-- We also add the controller from ur_gazebo that should control the simulated arm -->
		<!-- Fake Calibration -->
		<!-- <node pkg="rostopic" type="rostopic" name="fake_joint_calibration" args="pub /calibrated std_msgs/Bool true" /> -->

		<!-- joint_state_controller -->
		<!-- <rosparam file="$(find joint_state_controller)/joint_state_controller.yaml" command="load"/>
		<node name="joint_state_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn joint_state_controller" respawn="false" output="screen"/> -->

		<!-- gripper controller SCHUNK Controller!!! -->
		<!-- <node unless="$(arg robotiq_gripper)" name="$(arg prefix)gripper_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="gripper_left_controller gripper_right_controller  dashdashshutdown-timeout 1" /> -->


		<!-- <rosparam if="$(arg robotiq_gripper)" file="$(find icclab_summit_xl)/config/robotiq_gripper_controller.yaml" command="load"/> -->

		<!-- spawn controller manager -->
		<!-- <node if="$(arg robotiq_gripper)" name="gripper_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="gripper_left_controller" /> -->

		<!-- if robot_localization node is launched the controller must not publish the odom tf-->
		<param if="$(arg launch_robot_localization)" name="robotnik_base_control/enable_odom_tf" value="false"/>

		<!-- load the planar ros controllers by urdf -->
		<node if="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_read_state_controller">
		</node>

		<!-- load the diff ros controllers -->
		<node unless="$(arg ros_planar_move_plugin)" name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="	
		  robotnik_base_control
		  joint_read_state_controller 
		  ">
		</node>
	</group>

	<node pkg="twist_mux" type="twist_mux" name="twist_mux">
		<rosparam command="load" file="$(find summit_xl_control)/config/twist_mux.yaml" />
		<remap from="cmd_vel_out" to="$(arg cmd_vel)" />
	</node>
	<node pkg="twist_mux" type="twist_marker" name="twist_marker">
		<remap from="twist" to="$(arg cmd_vel)"/>
		<remap from="marker" to="twist_marker"/>
	</node>


</launch>

