<?xml version="1.0"?>
<launch>

	<arg name="mapping" 					default="false"/>

	<!-- GAZEBO -->
	<arg name="ros_planar_move_plugin" 		default="true"/> <!-- disables gazebo ros_control plugin -->
    <arg name="gazebo_world"                default="$(find aws_robomaker_bookstore_world)/worlds/bookstore2.world"/>
	<arg name="debug" 						default="false"/>
	<arg name="gui" 						default="true"/>
	<arg name="launch_rviz_nav" 			default="true"/>

	<!-- ROBOT A -->
	<arg name="x_init_pose" 				default="0" />
	<arg name="y_init_pose" 				default="0" />
	<arg name="z_init_pose" 				default="0" />

	<arg name="id_robot" 					default="summit_xl"/>
	<arg name="xacro_robot" 				default="irlab_summit_xls_std.urdf.xacro" />

	<!-- NAV STACK -->
    <arg name="launch_move_base" 			default="true"/>
	<arg name="launch_robot_localization" 	default="false"/>
	<arg name="launch_gmapping" 			value="$(arg mapping)"/> <!--true for gmapping-->
	<arg name="slam" 						value="$(arg mapping)"/> <!-- true for gmapping -->
	<arg name="launch_amcl_and_mapserver" 	value="false" if="$(arg mapping)"/> <!--false for gmapping-->
	<arg name="launch_amcl_and_mapserver" 	value="true" unless="$(arg mapping)"/> <!--true for other-->
	<arg name="omni" 						default="true"/>
	<arg name="teleop"                      default="false"/>
	<arg name="map_file" 					default="/expo_tests/exploration-map.yaml"/>
	<arg name="robot_localization_mode" 	default="odom"/> <!-- odom, complete (including gps)-->

	<!-- ARM CONTROL -->
    <arg name="robotiq_gripper" 			default="false"/>
	<arg name="collision_walls" 			default="false"/>
	<arg name="nav_test" 					default="false"/>

	<!-- GAZEBO --> <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" 					value="$(arg gazebo_world)"/>
		<arg name="debug" 						value="$(arg debug)" />
		<arg name="paused" 						value="false"/>
		<arg name="use_sim_time" 				value="true"/>
		<arg name="headless" 					value="false"/>
		<arg name="gui" 						value="$(arg gui)"/>
		<arg name="extra_gazebo_args" 			value="--lockstep"/>
	</include>

	<!-- RVIZ --> <!-- launch rviz with navigation config-->
	<node if="$(arg launch_rviz_nav)" name="rviz" pkg="rviz" type="rviz" required="true" 
	args="-d $(find icclab_summit_xl)/rviz/irlab_summitxl.rviz"/>

	<!-- ROBOT GROUP -->
	<group ns="$(arg id_robot)">

		<arg name="prefix" value="$(arg id_robot)_"/>

		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" command="$(find xacro)/xacro '$(find icclab_summit_xl)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg ros_planar_move_plugin) robotiq_gripper:=$(arg robotiq_gripper) collision_walls:=$(arg collision_walls)"/>

		<!-- robot_state_publisher -->
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>
		
		<!--include gazebo_ros_control pid configuration for controllers, need this for PositionJointInterface! -->
		<rosparam file="$(find icclab_summit_xl)/config/gazebo_control.yaml" command="load" />

		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_summit_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -urdf -param robot_description -model $(arg id_robot)" />

		<!-- start summit_xl_control nodes -->
		<include file="$(find icclab_summit_xl)/launch/control/summit_xl_control.launch">
			<arg name="prefix" 											value="$(arg prefix)"/>
			<arg name="sim" 											value="true"/>
			<arg if="$(arg ros_planar_move_plugin)" name="kinematics" 	value="steel_omni"/>
			<arg name="ros_planar_move_plugin" 							value="$(arg ros_planar_move_plugin)"/>
			<arg name="launch_robot_localization" 						value="$(arg launch_robot_localization)"/>
			<arg name="robotiq_gripper" 								value="$(arg robotiq_gripper)"/>
		</include>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include if="$(arg launch_robot_localization)" file="$(find summit_xl_localization)/launch/robot_localization_$(arg robot_localization_mode).launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!--================================== NAV STACK ==================================-->

		<!-- convert front camera depth image to LaserScan for input to laserscan merger -->
		<include if="$(eval launch_amcl_and_mapserver or launch_gmapping)" file="$(find icclab_summit_xl)/launch/depthimage_to_laserscan.launch"/>

		<!-- merge laser scan topics to scan_combined for ACML or GMapping, delay launch by 5 seconds -->
		<include if="$(eval launch_amcl_and_mapserver or launch_gmapping)" file="$(find icclab_summit_xl)/launch/timed_laserscan_multi_merger.launch">
			<arg name="delay_time" value="5"/>
		</include>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find icclab_summit_xl)/launch/move_base.launch">
				<arg name="prefix" 													value="$(arg prefix)"/>
				<arg name="scan_topic_front" 										value="scan_front"/>
				<arg name="scan_topic_rear" 										value="scan_rear"/>
				<arg unless="$(arg launch_robot_localization)" name="odom_topic" 	value="robotnik_base_control/odom"/>
				<arg if="$(arg launch_robot_localization)"     name="odom_topic" 	value="odometry/filtered_odom"/>
				<arg name="sim" 													value="true"/>
				<arg name="publish_voxel_map" 										value="true"/>
				<arg name="slam" 													value="$(arg slam)"/>
				<arg name="omni" 													value="$(arg omni)"/>
		</include>

		<!-- map server -->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find icclab_summit_xl)/launch/sim/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
		</include>

		<!-- amcl -->
		<include if="$(arg launch_amcl_and_mapserver)" file="$(find icclab_summit_xl)/launch/sim/amcl.launch">
			<arg name="prefix" 									value="$(arg prefix)"/>
			<arg if="$(arg omni)" 		name="odom_model_type" 	value="omni"/>
			<arg unless="$(arg omni)" 	name="odom_model_type" 	value="diff"/>
			<arg name="x_init_pose" 							value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" 							value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" 							value="$(arg z_init_pose)"/>
		</include>

		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find icclab_summit_xl)/launch/slam_gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- teleop - manually control robot with keyboard -->
		<node if="$(arg teleop)" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard"/>

		<!--================================== TESTING ==================================-->

		<!-- bringup move_base action client which tests sending a goal -->
		<node if="$(arg nav_test)" name="movebase_client_py" pkg="icclab_summit_xl" type="move_base_client.py" output="screen"/>

	</group>

</launch>
